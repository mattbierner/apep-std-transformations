{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n    Common text transformations.\n*/\n\"use strict\";\nconst pep = require('apep');\n\nconst pep_trans = module.exports = (proto = {}) => \n    Object.create(proto, Object.getOwnPropertyNames(pep_trans)\n        .reduce((p, c) => {\n            p[c] = Object.getOwnPropertyDescriptor(pep_trans, c);\n            return p;\n        }, {}));\n\nconst toLowerCase = x => ('' + x).toLowerCase();\nconst toUpperCase = x => ('' + x).toUpperCase();\n\nconst standardMapReplace = (whole, g1) => g1 === undefined ? whole : g1;\n\n/**\n    Try to match against one or more regular expressions.\n    \n    Match is designed to be used for declarations:\n    \n        const m = match()\n            .case(/ab(c)/)\n            .case(/ax/, x => x + x)\n            ...\n            .case(...);\n            \n    The result can then be applied to a generator.\n    \n        m(pep.str('abc'));\n        \n    Matches are on yielded values, use `pep.join` to match against all values.\n    \n    If no mapping function is provides, a successfully matched case returns \n    the first capture group of the match\n    \n    If a mapping function is provided, the function is invoked with the entire\n    string plus the match capture groups as arguments.\n*/\npep_trans.match = () => {\n    let cases = [];\n    const matcher = x => {\n        x = ('' + x);\n        for (const [matcher, replacer] of cases) {\n            const match = x.match(matcher);\n            if (match)\n                return replacer.apply(null, [x].concat(match.slice(1)));\n        }\n        return x;\n    };\n    \n    const self = g => pep.map(g, matcher);\n    self.case = (l, r = standardMapReplace) => {\n        cases.push([l, r]);\n        return self;\n    };\n    return self\n};\n\n/**\n    Run `String.prototype.replace` on the result of a generator.\n    \n    Curried because you usually want to save off the mapping\n    function as a named generator.\n        \n    @param target What to replace. Passed to String.prototype.replace\n    @param replacer How to replace. Passed to String.prototype.replace\n*/\npep_trans.replace = (target, replacer) =>\n    pep_trans.match()\n        .case(target, x => x.replace(target, replacer));\n\n/**\n    Convert the result of `g` to upper case.\n*/\npep_trans.upper = (g) =>\n    pep.map(g, toUpperCase);\n\n/**\n    Convert the result of `g` to lower case.\n*/\npep_trans.lower = (g) =>\n    pep.map(g, toLowerCase);\n\n/**\n    Capitalize words in `g`.\n    \n    This is run for each yielded value. Use `pep.join` if you want proper\n    capitalization spanning yielded values:    \n    \n        const p = pep.seq('ab c', 'd ef');\n        \n        pep.run(capitalize(p)) === 'Ab CD Ef';\n        pep.run(capitalize(pep.join(p))) === 'Ab Cd Ef';\n*/\npep_trans.capitalize =\n    pep_trans.replace(/\\b\\w/g, toUpperCase);\n\n/**\n    Case sensitive dictionary map function.\n    \n    Curried because you usually want to save off the mapping\n    function as a named generator.\n     \n    @param dictionary Object mapping string keys to values.\n    @param def Default value returned if non match is found\n*/\npep_trans.dict = (dictionary, def = '') => {\n    const lookup = x =>\n        (dictionary.hasOwnProperty(x) ? dictionary[x] : def);\n    return (g) => pep.map(g, lookup);\n}\n\n/**\n    Case insensitive dictionary mapping.\n    \n    @see dict.\n*/\npep_trans.dicti = (dictionary, def = '') => {\n    const lookupTable = Object.keys(dictionary).reduce((p, c) => {\n        p[toLowerCase(c)] = dictionary[c];\n        return p;\n    }, {});\n\n    const lookup = x => {\n        const key = toLowerCase(x);\n        return (dictionary.hasOwnProperty(key) ? dictionary[key] : def);\n    };\n    \n    return (g) => pep.map(g, lookup);\n};"],"sourceRoot":"/source/"}